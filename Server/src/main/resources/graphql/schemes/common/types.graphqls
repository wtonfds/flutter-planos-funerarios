scalar Long

# A date (only date) with format: "yyyyMMdd"
scalar Date

# A date (date + hours) with format: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
scalar DateTime

# A time (only hours) with format: "HH:mm:ss.SSSZ"
scalar Time

# A byte (int) -> -128 << x << 127
scalar Byte

# A e-mail object with pattern validation
scalar Email

#Geolocation

directive @Size(min : Int = 0, max : Int = 2147483647, message : String = "graphql.validation.Size.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

# Generic response
type CommonResponse {
    isError: Boolean!
    statusCode: Int!
    description: String!
}

type AddressDTO {
    zipCode: String!
    street: String!
    number: String!
    complement: String
    neighborhood: String!
    city: String!
    province: String!
    country: String
}

input AddressInput {
    zipCode: String!
    street: String!
    number: String!
    complement: String
    neighborhood: String!
    city: String!
    province: String!
    country: String!
}

# Pagination stuff

# Info about the pagination for the request
# When empty, the first 100 results are returned
# The index start in the page 0
type PaginationInfo {
    numberOfRecordsByPage: Int!
    pageNumber: Int!
    totalRecords: Long!
}

# Do the request using pagination
input Paginate {
    numberOfRecordsByPage: Int!
    pageNumber: Int!
}

# Enums
enum WeekDay {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
}